# Q1. Which keyword is used to create a function?
# Create a function to return a list of odd numbers
# in the range of 1 to 25.

# "def" keyword is used to create function
def odd(n):
    for i in range(1, n + 1):
        if i % 2 != 0:
            print(i)


odd(25)

# Q.2 Why *args and **kwargs is used in some functions?
# Create a function each for *args and **kwargs
# to demonstrate their use.

# *args and **kwargs allow you to pass multiple
# arguments or keyword arguments to a function.

print("*args")


def my_sum(*args):
    result = 0
    for i in args:
        result += i
    return result


print(my_sum(25, 26, 27, 28))

print("**kwargs")


def concatenate_string(**kwargs):
    con1 = ""
    for i in kwargs.values():
        con1 += i
    return con1


print(concatenate_string(a="avinash", b="digambar", c="gawai"))


# *args specifies the number of non-keyworded arguments that
# can be passed and the operations that can be performed on
# the function in Python whereas **kwargs is a variable number
# of keyworded arguments that can be passed to a function that
# can perform dictionary operations.

def student_name(normal, *args):
    print(normal, )
    for i in args:
        print(i)


#
student_name_list = ["avinash await", "pw skills", "sunshade unknown", "meri marji"]
avi = "Student name are as follows:"
student_name(avi, *student_name_list)


def addtion(**kwargs):
    sum = 0
    for key, value in kwargs.items():
        sum = sum + value
        print(f"subject name {key} and mark obtain is {value}")
    print(f"total marks is {sum}")


dic = {"math": 25, "english": 26, "hindi": 27, "history": 28}
addtion(**dic)

# Q3. What is an iterator in python? Name the method used to initialise the iterator object and the method
# used for iteration. Use these methods to print the first five elements of the given list
# [2, 4, 6, 8, 10, 12, 14, 16, 18, 20].

# Python Iterators
# An iterator is an object that contains a countable number of values.An iterator is an object that can
# be iterated upon, meaning that you can traverse through all the values.Technically, in Python, an
# iterator is an object which implements the iterator protocol, which consist of the methods __iter__() and __next__().

# Iterator in Python is an object that is used to iterate over iterable objects like lists, tuples, dicts,
# and sets. The iterator object is initialized using the iter() method. It uses the next() method for iteration.
# __iter__(): The iter() method is called for the initialization of an iterator. This returns an iterator object
# __next__(): The next method returns the next value for the iterable. When we use a for loop to traverse any
# iterable object, internally it uses the iter() method to get an iterator object, which further uses the next()
# method to iterate over. This method raises a StopIteration to signal the end of the iteration.

string = "GFG"
ch_iterator = iter(string)

print(next(ch_iterator))
print(next(ch_iterator))
print(next(ch_iterator))

print("example 1")
l1 = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]
my = iter(l1)
for i in l1:
    if i < l1[5]:
        print(i)

print(next(my))
print(next(my))
print(next(my))
print(next(my))
print(next(my))

print("example 2")


class MyNumbers:
    def __iter__(self):
        self.a = 1
        return self

    def __next__(self):
        x = self.a
        self.a += 1
        return x


myclass = MyNumbers()
myiter = iter(myclass)

print(next(myiter))
print(next(myiter))
print(next(myiter))
print(next(myiter))
print(next(myiter))


# Q4. What is a generator function in python? Why yield keyword
# is used? Give an example of a generator-function.

# Python Generator functions allow you to declare a function that
# behaves likes an iterator, allowing programmers to make an iterator
# in a fast, easy, and clean way. An iterator is an object that can be
# iterated or looped upon. It is used to abstract a container of data
# to make it behave like an iterable object. Examples of iterable
# objects that are used more commonly include lists, dictionaries,
# and strings.

# yield keyword is used to create a generator function. A type of function
# that is memory efficient and can be used like an iterator object.

def fib(n):
    a, b = 0, 1
    for i in range(0, n):
        yield a
        a, b = b, a + b


print(list(fib(10)))


# Q5. Create a generator function for prime numbers less than 1000.
# Use the next() method to print the first 20 prime numbers.
def isPrime(num):
    for i in range(2, num):
        if num % i == 0:
            return False
    return True


def primeGenerator(n):
    num = 2
    while n:
        if isPrime(num):
            yield num
            n -= 1
        num += 1
    return


num = primeGenerator(1000)
prime = iter(num)
for i in range(0, 10):
    print(next(prime))

# print(next(prime))
# print(next(prime))
# print(next(prime))
# print(next(prime))
# print(next(prime))
# print(next(prime))
# print(next(prime))
# print(next(prime))
# print(next(prime))
# print(next(prime))


# Q6. Write a python program to print the first
# 10 Fibonacci numbers using a while loop.
i = 1
n = 10
a = 0
b = 1
sum = 0
while i <= n:
    print(a)
    sum = a + b
    a = b
    b = sum
    i += 1


# Q7. Write a List Comprehension to iterate through the given string: ‘pwskills’.
# Expected output: ['p', 'w', 's', 'k', 'i', 'l', 'l', 's']

string1 = "pwskills"
l1 = []
print(list(i for i in string1))

# Q.8 Write a python program to check whether a given number is Palindrome or not using a while loop.
num = int(input("enter first number"))
num2 = str(input("enter second number"))
rev = num2[::-1]
print("palindrome" if num==int(rev) or int(rev) == num else "not palindrome")


# Q9. Write a code to print odd numbers from 1 to 100 using list comprehension.
print(list(i for i in range(1,101) if i % 2 != 0))
